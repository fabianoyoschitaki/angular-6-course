[update npm]
npm install -g npm

[update angular CLI]
npm uninstall -g angular-cli @angular/cli@latest (optional)
npm install @angular/cli

ng new my-dream-app
cd my-dream-app
ng serve

URL: localhost:4200 

Angular component
	template: the html code
	possible styling: css file 
	typescript file: the definition of the component, this is what will be converted to normal javascript by the build workflow
	
index.html has <app-root>

[install bootstrap locally, not globally]
	npm install --save bootstrap@3
	open angular.json and find "architect"/"build"/"styles", change it from "src/styles.css" 
	"styles": [
	  "node_modules/bootstrap/dist/css/bootstrap.min.css",
	  "src/styles.css"
	],
	save and re-run ng serve to load the new configuration
	
* Angular in the end is a JS framework, changing your DOM (html) at runtime.

[components]
	you build your whole application by composing it from a couple of components. Each component has its own template, its html code, styling and more important its own business logic. 
	we should add components to app.component.html, not to index.html
	
	Register new component in the app.module.ts, declarations array.
	
[creating new component with CLI and nesting]
	ng generate component servers (or ng g c servers)
	* spec file basically is used for testing
	
[working with component templates]
	 templateUrl: './servers.component.html', 
		single line -> template: '<app-server></app-server><app-server></app-server>'
		multiple lines -> template: `<app-server></app-server>
									 <app-server></app-server>`
									 
[working with component styles]
	@Component file, you can:
	 //styleUrls: ['./app.component.css']
	  styles: [`
		h3 {
		  color: dodgerblue;
		}
	  `]
	
[fully understanding the component selector]
	let's talk about the @Component selector. You can change:
		selector: 'app-servers',
		selector: '[app-servers]', it becomes an attribute
	
	and then, when using it, change it:
		<app-servers></app-servers>
		<div app-servers>
		
	now angular selects the component by attribute, not by the element itself.
	
	another option is to select by class:
		selector: 'app-servers',
		selector: '.app-servers', 
	
	<app-servers> : for components 
	
[Assignment: Practicing Components]
Time to practice what you learned about Components. In this assignment, you're going to create, 
use and style your own components and see practice how you can build up your Angular app with Components.
		

[22 - what is databinding?]
	let's show something that is not hard-coded into the template with databinding. 
	Databinding = Communication between TS code of your component, the business logic, and the template, what the user sees.
	We can use:
		----- Output data ---->>>
		String Interpolation: {{data}}
		Property Binding [property]="data"
		
		<<<---- React to user events ----
		Event binding (event)="expression" //a click event for instance
		
	Combination of both:
		Two-Way-Binding [(ngModel)]="data"

[23 - String interpolation]
	output data to a template.
	
	-server.component.ts
	export class ServerComponent {
		serverId: number = 10;
		serverStatus: string = 'offline';

		getServerStatus() {
			return this.serverStatus;
		}
	}
	
	-server.component.html
	<p>{{ 'Server' }} with ID {{serverId}} is {{getServerStatus()}}</p>

[24 - Property Binding]
	[ ] indicate property binding
	
	<button 
    class='btn btn-primary' 
    [disabled]="!allowNewServer">Add Server</button>
	
	export class ServersComponent implements OnInit {
	  allowNewServer = false;

	  constructor() { 
		setTimeout(() => {
		  this.allowNewServer = true;
		}, 2000);
	  }
	}
	
[25 - Property Binding vs String Interpolation]
	<p>{{ allowNewServer }}</p>
	<p [innerText]="allowNewServer"></p>
	
	when should we use which of the two?
	output something in your template: string interpolation
	change some property: property binding
	
[26 - Event Binding]
	<button 
    class='btn btn-primary' 
    (click)="onCreateServer()">Add Server</button>
	
	export class ServersComponent implements OnInit {
	  serverCreationStatus = "No server was created!";
      onCreateServer(){
		this.serverCreationStatus = "Server was created!";
	  }

[27 - Bindable Properties and Events]
	How do you know to which Properties or Events of HTML Elements you may bind? You can basically bind to all Properties and Events - a good idea is to console.log() the element you're interested in to see which properties and events it offers.
	
	Important: For events, you don't bind to onclick but only to click (=> (click)).
	
	The MDN (Mozilla Developer Network) offers nice lists of all properties and events of the element you're interested in. Googling for YOUR_ELEMENT properties or YOUR_ELEMENT events  should yield nice results.
	
[28 - Passing and Using Data with Event Binding]
	$event -> gives us access to event data
	
	<label>Server Name</label>
	<input 
		type="text"
		class="form-control"
		(input)="onUpdateServerName($event)">
	<p>{{ serverName }}</p>
	
	onUpdateServerName(event: Event){
		this.serverName = (<HTMLInputElement>event.target).value;
	}
	
[29 - Important: FormsModule is required for Two-Way-Binding]
	Important: For Two-Way-Binding (covered in the next lecture) to work, you need to enable the ngModel directive. 
	This is done by adding the FormsModule to the imports[] array in the AppModule.
	
	You then also need to add the import from @angular/forms  in the app.module.ts file: import { FormsModule } from '@angular/forms';
	
	
[30 - Two-Way-Databinding]
	two way binding we combine property and event binding. 
	To be able to use 'ngModel', the FormsModule (from @angular/forms) needs to be added to your imports[] array in the AppModule (should be there by default in a CLI project!)
	
	<input 
    type="text"
    class="form-control"
    [(ngModel)]="serverName">
	
[31 - Combining all forms of databinding]
	* Add a Input field which updates a property ('username') via Two-Way-Binding
	* Output the username property via String Interpolation (in a paragraph below the input)
	* Add a button which may only be clicked if the username is NOT an empty string
	* Upon clicking the button, the username should be reset to an empty string
	
	<label>Username</label>
      <input type="text" class="form-control" [(ngModel)]="username">
      <p>{{ username }}</p>
      <button
        class="btn btn-primary"
        [disabled]="username === ''"
        (click)="username = ''">Reset User</button>
             
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	